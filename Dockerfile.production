# Production-ready Multi-stage Dockerfile for Google Cloud Run
# ----------------------------------------------------------------

# Stage 1: Build environment with cargo-chef
# Using "bookworm" for a more secure and up-to-date base OS
FROM --platform=linux/amd64 rust:1.89-bookworm AS builder

# Install build dependencies and cargo-chef in one layer
# libclang-dev'i buraya ekliyoruz.
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    clang \
    libclang-dev \
    && rm -rf /var/lib/apt/lists/* \
    && cargo install cargo-chef

WORKDIR /usr/src/app

# --- Dependency Caching with cargo-chef (Doğru Yöntem) ---

# Sadece Cargo.toml'ı kopyalayarak bağımlılıkları önbelleğe al
COPY Cargo.toml Cargo.lock ./

# Bağımlılıkları derle
RUN cargo chef prepare --recipe-path recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Şimdi uygulamanın geri kalanını kopyala ve derle
COPY . .
RUN cargo build --release

# ----------------------------------------------------------------
# Stage 2: Minimal runtime image
# (Bu kısım aynı kalabilir, değişiklik yok)
# --- Final Runtime Stage ---
FROM debian:bookworm-slim AS production

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install runtime dependencies with security updates
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy the built binaries from the builder stage
# Your Cargo.toml defines two binaries: todo_api and migrate.
COPY --from=builder /usr/src/app/target/release/todo_api /usr/local/bin/todo_api
COPY --from=builder /usr/src/app/target/release/migrate /usr/local/bin/migrate

# Change ownership to non-root user
RUN chown appuser:appuser /usr/local/bin/todo_api && \
    chown appuser:appuser /usr/local/bin/migrate

# Switch to non-root user
USER appuser

# Set default environment variables
ENV RUST_LOG=info

# Expose port
EXPOSE 8080

# Run the application
CMD ["todo_api"]