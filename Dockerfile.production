# Production-ready Multi-stage Dockerfile for Google Cloud Run
# ----------------------------------------------------------------

# Stage 1: Build environment with cargo-chef
# Using "bookworm" for a more secure and up-to-date base OS
FROM --platform=linux/amd64 rust:1.89-bookworm AS builder

# Install build dependencies and cargo-chef in one layer
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    clang \
    && rm -rf /var/lib/apt/lists/* \
    && cargo install cargo-chef

WORKDIR /usr/src/app

# --- Dependency Caching with cargo-chef ---
# First, copy only the files required to calculate dependencies
COPY Cargo.toml Cargo.lock ./
COPY .sqlx ./.sqlx
COPY migrations ./migrations
# Copying src is needed to understand all dependencies, including binary-specific ones
COPY src ./src 

# 1. Prepare the build recipe
RUN cargo chef prepare --recipe-path recipe.json

# 2. Cook (build) the dependencies. This layer will be cached heavily.
RUN cargo chef cook --release --recipe-path recipe.json

# --- Actual Build ---
# 3. Copy the rest of the source code and build the final application
COPY . .
RUN cargo build --release

# ----------------------------------------------------------------
# Stage 2: Minimal runtime image
# Using "bookworm-slim" for consistency and security
# --- Final Runtime Stage ---
FROM debian:bookworm-slim AS production

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install runtime dependencies with security updates
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy the built binaries from the builder stage
# Your Cargo.toml defines two binaries: todo_api and migrate.
COPY --from=builder /usr/src/app/target/release/todo_api /usr/local/bin/todo_api
COPY --from=builder /usr/src/app/target/release/migrate /usr/local/bin/migrate

# Change ownership to non-root user
# If you don't need the migrate binary in production, you can remove this line.
RUN chown appuser:appuser /usr/local/bin/todo_api && \
    chown appuser:appuser /usr/local/bin/migrate

# Switch to non-root user
USER appuser

# Set default environment variables
ENV RUST_LOG=info

# Cloud Run will set the PORT environment variable
# Expose port (Cloud Run ignores this anyway)
EXPOSE 8080

# Run the application
CMD ["todo_api"]