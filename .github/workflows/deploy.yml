# Bu, Axum + Neon + Cloud Run mimarisi için optimize edilmiş, modern bir CI/CD dosyasıdır.
name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: 364661851580 # Google Cloud Proje ID'niz
  SERVICE: todo-api # Cloud Run servis adınız
  REGION: us-central1 # Cloud Run bölgeniz
  GAR_LOCATION: us-central1 # Artifact Registry bölgesi (genellikle REGION ile aynı)

jobs:
  # 'test' işi (job) senin orijinal dosyanla aynı, çünkü doğru çalışıyor.
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Kodu Checkout Yap
      uses: actions/checkout@v4
      
    - name: Rust Kurulumu
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cargo Bağımlılıklarını Cache'le
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Sistem Bağımlılıklarını Kur
      run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev
        
    - name: Testleri Çalıştır
      env:
        DATABASE_URL: postgres://postgres:password@localhost:5432/test_db
        JWT_SECRET: test-jwt-secret-32-characters-long-for-testing-purposes
        HASHING_SECRET_KEY: test-hashing-secret-16-chars
        SQLX_OFFLINE: "true"
        PROJECT_ID: 364661851580
      run: cargo test --verbose --lib --bins
      
    - name: Clippy Kontrolü
      run: cargo clippy --all-targets --all-features -- -W clippy::all
      
    - name: Format Kontrolü
      run: cargo fmt -- --check

  # 'deploy' işi tamamen yenilendi ve optimize edildi.
  deploy:
    needs: test # Deploy'dan önce testlerin başarılı olmasını zorunlu kılıyoruz.
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # GÜVENLİK GÜNCELLEMESİ: Google Cloud ile anahtarsız (keyless) kimlik doğrulama için izinler.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Kodu Checkout Yap
      uses: actions/checkout@v4

    # ADIM 1: GÜVENLİ Google Cloud Kimlik Doğrulaması
    - name: Google Cloud'a Anahtarsız Giriş Yap
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        # ⚠️ ÖNEMLİ: Aşağıdaki satırı kendi bilgilerinizle doldurun!
        workload_identity_provider: 'projects/364661851580/locations/global/workloadIdentityPools/github-actions-pool/providers/my-github-provider'
        service_account: 'todo-api@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

    # ADIM 2: Modern Docker Derleme Ortamını Kur (Buildx)
    - name: Docker Buildx Kurulumu
      uses: docker/setup-buildx-action@v3
    
    # ADIM 3: Google Artifact Registry'ye Docker Erişimi
    - name: Artifact Registry'ye Giriş Yap
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    # ADIM 4: Docker İmajını Derle ve Artifact Registry'ye Yükle
    - name: Docker İmajını Derle ve Push'la
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/cache:latest
        cache-to: type=registry,ref=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/cache:latest,mode=max

    # ADIM 5: Cloud Run'a Yeni İmajı Deploy Et
    - name: Cloud Run'a Deploy Et
      run: |
        gcloud run deploy ${{ env.SERVICE }} \
          --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --service-account todo-api@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --port 8080 \
          --execution-environment gen2
          
    # Kalan adımlar aynı, sadece URL'i alıp test ediyorlar.
    - name: Servis URL'ini Al
      id: get_url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} --region=${{ env.REGION }} --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Deploy Edilen Servisi Test Et
      run: |
        echo "Testing health endpoint..."
        curl -f ${{ steps.get_url.outputs.SERVICE_URL }}/health || exit 1
        echo "✅ Health check passed!"

    - name: Deploy Başarısını Bildir
      run: |
        echo "🎉 Deployment successful!"
        echo "Service URL: ${{ steps.get_url.outputs.SERVICE_URL }}"

